// Generated by gencpp from file drone_controller/markerpose.msg
// DO NOT EDIT!


#ifndef DRONE_CONTROLLER_MESSAGE_MARKERPOSE_H
#define DRONE_CONTROLLER_MESSAGE_MARKERPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace drone_controller
{
template <class ContainerAllocator>
struct markerpose_
{
  typedef markerpose_<ContainerAllocator> Type;

  markerpose_()
    : header()
    , order(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , quality(0.0)
    , timestamp()  {
    }
  markerpose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , order(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , quality(0.0)
    , timestamp()  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _order_type;
  _order_type order;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _quality_type;
  _quality_type quality;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;




  typedef boost::shared_ptr< ::drone_controller::markerpose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_controller::markerpose_<ContainerAllocator> const> ConstPtr;

}; // struct markerpose_

typedef ::drone_controller::markerpose_<std::allocator<void> > markerpose;

typedef boost::shared_ptr< ::drone_controller::markerpose > markerposePtr;
typedef boost::shared_ptr< ::drone_controller::markerpose const> markerposeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_controller::markerpose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_controller::markerpose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drone_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'drone_controller': ['/home/per/GIT/guided-landing/catkin_ws/src/drone_controller/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drone_controller::markerpose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_controller::markerpose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_controller::markerpose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_controller::markerpose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_controller::markerpose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_controller::markerpose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_controller::markerpose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b1f0f0642695a793c93c4a2dcaa8c41";
  }

  static const char* value(const ::drone_controller::markerpose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b1f0f0642695a79ULL;
  static const uint64_t static_value2 = 0x3c93c4a2dcaa8c41ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_controller::markerpose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_controller/markerpose";
  }

  static const char* value(const ::drone_controller::markerpose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_controller::markerpose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header 	 header\n\
uint8    order\n\
float64  x\n\
float64  y\n\
float64  theta\n\
float64  quality\n\
time     timestamp\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::drone_controller::markerpose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_controller::markerpose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.order);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.quality);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct markerpose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_controller::markerpose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_controller::markerpose_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "order: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.order);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "quality: ";
    Printer<double>::stream(s, indent + "  ", v.quality);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_CONTROLLER_MESSAGE_MARKERPOSE_H
